{
  "CLICK ON THE GRID TO GET THE RELATED ITEMS TIME SERIES": "CLICK ON THE GRID TO GET THE RELATED ITEMS TIME SERIES",
  "Consent": "Consent",
  "CRM System CSV File ": "CRM System CSV File ",
  "Data Impacted By Data Breach": "Data Impacted By Data Breach",
  "Decoded": "Decoded",
  "Domain Data": "Domain Data",
  "Event Consent": "Event Consent",
  "Event Consent Date": "Date",
  "Event Consent Metadata Create Date": "Metadata Create Date",
  "Event Consent Metadata Update Date": "Metadata Update Date",
  "Event Consent Status": "Status",
  "Event Data Breach": "Event Data Breach",
  "Event Data Breach Description": "Description",
  "Event Data Breach Id": "Id",
  "Event Data Breach Impact": "Impact",
  "Event Data Breach Metadata Create Date": "Metadata Create Date",
  "Event Data Breach Metadata Update Date": "Metadata Update Date",
  "Event Data Breach Source": "Source",
  "Event Data Breach Status": "Status",
  "Event Form Ingestion": "Event Form Ingestion",
  "Event Form Ingestion Domain b64": "Domain b64",
  "Event Form Ingestion Metadata Create Date": "Metadata Create Date",
  "Event Form Ingestion Metadata GUID": "Metadata GUID",
  "Event Form Ingestion Operation": "Operation",
  "Event Form Ingestion Type": "Type",
  "Event Group Ingestion": "Event Group Ingestion",
  "Event Group Ingestion Has Controller": "Has Controller",
  "Event Group Ingestion Has Data Owner": "Has Data Owner",
  "Event Group Ingestion Has Processor": "Has Processor",
  "Event Group Ingestion Metadata End Date": "Metadata End Date",
  "Event Group Ingestion Metadata Start Date": "Metadata Start Date",
  "Event Group Ingestion Operation": "Operation",
  "Event Group Ingestion Type": "Type",
  "Event Ingestion": "Event Ingestion",
  "Event Ingestion Business Rules": "Business Rules",
  "Event Ingestion Domain b64": "Domain b64",
  "Event Ingestion Domain Unstructured Data b64": "Domain Unstructured Data b64",
  "Event Ingestion Metadata Create Date": "Metadata Create Date",
  "Event Ingestion Metadata GUID": "Metadata GUID",
  "Event Ingestion Operation": "Operation",
  "Event Ingestion Type": "Type",
  "Event Subject Access Request": "Event Subject Access Request",
  "Event Subject Access Request Metadata Create Date": "Create Date",
  "Event Subject Access Request Metadata Update Date": "Update Date",
  "Event Subject Access Request Request Type": "Request Type",
  "Event Subject Access Request Status": "Status",
  "Event Training": "Event Training",
  "Event Training Status": "Status",
  "Graph": "Graph",
  "Has Form Ingestion Event": "Has Form Ingestion Event",
  "Has Ingestion Event": "Has Ingestion Event",
  "Has Ingress Peering": "Has Ingress Peering",
  "Has Policy": "Has Policy",
  "Has Security Group": "Has Security Group",
  "Has Server": "Has Server",
  "Impacted By Data Breach": "Impacted By Data Breach",
  "Ingestion Date": "Ingestion Date",
  "Lives": "Lives",
  "Location Address": "Location Address",
  "Location Address City": "City",
  "Location Address Full Address": "Full Address",
  "Location Address parser category": "Address Parser category",
  "Location Address parser city": "Address Parser city",
  "Location Address parser city district": "Address Parser city district",
  "Location Address parser country": "Address Parser country",
  "Location Address parser country region": "Address Parser country region",
  "Location Address parser entrance": "Address Parser entrance",
  "Location Address parser house": "Address Parser house",
  "Location Address parser house number": "Address Parser house number",
  "Location Address parser island": "Address Parser island",
  "Location Address parser level": "Address Parser level",
  "Location Address parser near": "Address Parser near",
  "Location Address parser po box": "Address Parser po box",
  "Location Address parser postcode": "Address Parser postcode",
  "Location Address parser road": "Address Parser road",
  "Location Address parser staircase": "Address Parser staircase",
  "Location Address parser state": "Address Parser state",
  "Location Address parser state district": "Address Parser state district",
  "Location Address parser suburb": "Address Parser suburb",
  "Location Address parser unit": "Address Parser unit",
  "Location Address parser world region": "Address Parser world region",
  "Location Address Post Code": "Post Code",
  "Location Address State": "State",
  "Location Address Street": "Street",
  "Made SAR Request": "Made SAR Request",
  "Marketing Email System ": "Marketing Email System ",
  "Metadata Create Date": "Metadata Create Date",
  "Metadata GDPR Status": "Metadata GDPR Status",
  "Metadata Lineage": "Metadata Lineage",
  "Metadata Lineage Location Tag": "Metadata Lineage Location Tag",
  "Metadata Redaction": "Metadata Redaction",
  "Metadata Status": "Metadata Status",
  "Metadata Type": "Metadata Type",
  "Metadata Type Event Consent": "Data Type - Event Consent",
  "Metadata Type Event Data Breach": "Data Type - Event Data Breach",
  "Metadata Type Event Form Ingestion": "Data Type - Event Form Ingestion",
  "Metadata Type Event Group Ingestion": "Data Type - Event Group Ingestion",
  "Metadata Type Event Ingestion": "Data Type - Event Ingestion",
  "Metadata Type Location Address": "Data Type - Location Address",
  "Metadata Type Object AWS Instance": "Data Type - Object AWS Instance",
  "Metadata Type Object Credential": "Data Type - Object Credential",
  "Metadata Type Object Email Address": "Data Type - Object Email Address",
  "Metadata Type Object Insurance Policy": "Data Type - Object Insurance Policy",
  "Metadata Type Object Privacy Impact Assessment": "Data Type - Object Privacy Impact Assessment",
  "Metadata Type Person Natural": "Data Type - Person Natural",
  "Metadata Update Date": "Update Date",
  "Metadata Version": "Version",
  " num events": " num events",
  "Object Awareness Campaign": "Object Awareness Campaign",
  "Object Awareness Campaign Description": "Description",
  "Object Awareness Campaign Form Id": "Form Id",
  "Object Awareness Campaign Form Owner Id": "Form Owner Id",
  "Object Awareness Campaign Form Submission Id": "Form Submission Id",
  "Object Awareness Campaign Form Submission Owner Id": "Form Submission Owner Id",
  "Object Awareness Campaign Start Date": "Start Date",
  "Object Awareness Campaign Stop Date": "Stop Date",
  "Object Awareness Campaign URL": "URL",
  "Object AWS Instance": "Object AWS Instance",
  "Object AWS Instance EbsOptimized": "EbsOptimized",
  "Object AWS Instance EnaSupport": "EnaSupport",
  "Object AWS Instance Id": "Id",
  "Object AWS Instance ImageId": "ImageId",
  "Object AWS Instance InstanceType": "InstanceType",
  "Object AWS Instance KeyName": "KeyName",
  "Object AWS Instance LaunchTime": "LaunchTime",
  "Object AWS Instance PrivateDnsName": "PrivateDnsName",
  "Object AWS Instance PrivateIpAddress": "PrivateIpAddress",
  "Object AWS Instance ProductCodeIDs": "ProductCodeIDs",
  "Object AWS Instance ProductCodeTypes": "ProductCodeTypes",
  "Object AWS Instance Public Dns Name": "Public Dns Name",
  "Object AWS Instance Tags": "Tags",
  "Object AWS Network Interface": "Object AWS Network Interface",
  "Object AWS Network Interface AttachTime": "Attach Time",
  "Object AWS Network Interface Description": "Description",
  "Object AWS Network Interface MacAddress": "Mac Address",
  "Object AWS Network Interface NetworkInterfaceId": "Network Interface Id",
  "Object AWS Network Interface PrivateDnsName": "Private Dns Name",
  "Object AWS Network Interface PrivateIpAddresses": "Private Ip Addresses",
  "Object AWS Security Group": "Object AWS Security Group",
  "Object AWS Security Group GroupName": "GroupName",
  "Object AWS Security Group Id": "Id",
  "Object AWS Security Group Ip Perms Egress IpRanges": "Ip Perms Egress IpRanges",
  "Object AWS Security Group Ip Perms Ingress IpRanges": "Ip Perms Ingress IpRanges",
  "Object AWS VPC": "Object AWS VPC",
  "Object AWS VPC Id": "Object AWS VPC Id",
  "Object Credential": "Object Credential",
  "Object Credential Login SHA256": "Login SHA256",
  "Object Credential User Id": "User Id",
  "Object Data Policy": "Object Data Policy",
  "Object Data Policy CreateDate": "CreateDate",
  "Object Data Policy Description": "Description",
  "Object Data Policy Form Id": "Form Id",
  "Object Data Policy Form Owner Id": "Form Owner Id",
  "Object Data Policy Form Submission Id": "Form Submission Id",
  "Object Data Policy Form Submission Owner Id": "Form Submission Owner Id",
  "Object Data Policy Name": "Name",
  "Object Data Policy UpdateDate": "UpdateDate",
  "Object Data Procedures": "Object Data Procedures",
  "Object Data Procedures Delete Mechanism": "Delete Mechanism",
  "Object Data Procedures Delete URL": "Delete URL",
  "Object Data Procedures Property": "Property",
  "Object Data Procedures Type": "Type",
  "Object Data Procedures Update Mechanism": "Update Mechanism",
  "Object Data Procedures Update URL": "Update URL",
  "Object Data Source": "Object Data Source",
  "Object Data Source Create Date": "Create Date",
  "Object Data Source Credential ApiKey": "Credential ApiKey",
  "Object Data Source Credential Principal": "Credential Principal",
  "Object Data Source Credential Secret": "Credential Secret",
  "Object Data Source Description": "Description",
  "Object Data Source Form Id": "Form Id",
  "Object Data Source Form Owner Id": "Form Owner Id",
  "Object Data Source Form Submission Id": "Form Submission Id",
  "Object Data Source Form Submission Owner Id": "Form Submission Owner Id",
  "Object Data Source Name": "Name",
  "Object Data Source Update Date": "Update Date",
  "Object Data Source URI Config": "URI Config",
  "Object Data Source URI Control": "URI Control",
  "Object Data Source URI Delete": "URI Delete",
  "Object Data Source URI Monitor": "URI Monitor",
  "Object Data Source URI Read": "URI Read",
  "Object Data Source URI Template": "URI Template",
  "Object Data Source URI Update": "URI Update",
  "Object Email Address": "Object Email Address",
  "Object Email Address Email": "Email",
  "Object Form": "Object Form",
  "Object Form Metadata Create Date": "Create Date",
  "Object Form Metadata GUID": "GUID",
  "Object Form Metadata Owner": "Owner",
  "Object Form Text": "Text",
  "Object Form URL": "URL",
  "Object Form Vertex Label": "Vertex Label",
  "Object Identity Card": "Object Identity Card",
  "Object Identity Card Id Name": "Id Name",
  "Object Identity Card Id Value": "Id Value",
  "Object Insurance Policy": "Object Insurance Policy",
  "Object Insurance Policy Form Id": "Form Id",
  "Object Insurance Policy Form Owner Id": "Form Owner Id",
  "Object Insurance Policy Form Submission Id": "Form Submission Id",
  "Object Insurance Policy Form Submission Owner Id": "Form Submission Owner Id",
  "Object Insurance Policy Number": "Number",
  "Object Insurance Policy Product Type": "Product Type",
  "Object Insurance Policy Property Type": "Property Type",
  "Object Insurance Policy Renewal": "Renewal",
  "Object Insurance Policy Renewal Date": "Renewal Date",
  "Object Insurance Policy Status": "Status",
  "Object Insurance Policy Type": "Type",
  "Object Lawful Basis": "Object Lawful Basis",
  "Object Lawful Basis Description": "Description",
  "Object Lawful Basis Id": "Id",
  "Object MoU": "Object MoU",
  "Object MoU Description": "Description",
  "Object MoU Form Id": "Form Id",
  "Object MoU Form Owner Id": "Form Owner Id",
  "Object MoU Form Submission Id": "Form Submission Id",
  "Object MoU Form Submission Owner Id": "Form Submission Owner Id",
  "Object MoU Id": "Id",
  "Object MoU Link": "Link",
  "Object MoU Status": "Status",
  "Object Notification Templates": "Object Notification Templates",
  "Object Notification Templates Id": "Id",
  "Object Notification Templates Label": "Label",
  "Object Notification Templates Text": "Text",
  "Object Notification Templates Types": "Types",
  "Object Notification Templates URL": "URL",
  "Object Phone Number": "Object Phone Number",
  "Object Phone Number Last 7 Digits": "Last 7 Digits",
  "Object Phone Number Numbers Only": "Numbers Only",
  "Object Phone Number Raw": "Raw",
  "Object Phone Number Type": "Type",
  "Object Privacy Impact Assessment": "Object Privacy Impact Assessment",
  "Object Privacy Impact Assessment Compliance Check Passed": "Compliance Check Passed",
  "Object Privacy Impact Assessment Delivery Date": "Delivery Date",
  "Object Privacy Impact Assessment Description": "Description",
  "Object Privacy Impact Assessment Form Id": "Form Id",
  "Object Privacy Impact Assessment Form Owner Id": "Form Owner Id",
  "Object Privacy Impact Assessment Form Submission Id": "Form Submission Id",
  "Object Privacy Impact Assessment Form Submission Owner Id": "Form Submission Owner Id",
  "Object Privacy Impact Assessment Intrusion On Privacy": "Intrusion On Privacy",
  "Object Privacy Impact Assessment Risk Of Reputational Damage": "Risk Of Reputational Damage",
  "Object Privacy Impact Assessment Risk To Corporation": "Risk To Corporation",
  "Object Privacy Impact Assessment Risk To Individuals": "Risk To Individuals",
  "Object Privacy Impact Assessment Start Date": "Start Date",
  "Object Privacy Notice": "Object Privacy Notice",
  "Object Privacy Notice Delivery Date": "Delivery Date",
  "Object Privacy Notice Description": "Description",
  "Object Privacy Notice Effect On Individuals": "Effect On Individuals",
  "Object Privacy Notice Expiry Date": "Expiry Date",
  "Object Privacy Notice Form Id": "Form Id",
  "Object Privacy Notice Form Owner Id": "Form Owner Id",
  "Object Privacy Notice Form Submission Id": "Form Submission Id",
  "Object Privacy Notice Form Submission Owner Id": "Form Submission Owner Id",
  "Object Privacy Notice How Is It Collected": "How Is It Collected",
  "Object Privacy Notice How Will It Be Used": "How Will It Be Used",
  "Object Privacy Notice Id": "Id",
  "Object Privacy Notice Info Collected": "Info Collected",
  "Object Privacy Notice Likely To Complain": "Likely To Complain",
  "Object Privacy Notice Metadata Create Date": "Metadata Create Date",
  "Object Privacy Notice Metadata Update Date": "Metadata Update Date",
  "Object Privacy Notice Text": "Text",
  "Object Privacy Notice URL": "URL",
  "Object Privacy Notice Who Is Collecting": "Who Is Collecting",
  "Object Privacy Notice Who Will It Be Shared": "Who Will It Be Shared",
  "Object Privacy Notice Why Is It Collected": "Why Is It Collected",
  "Operation": "Operation",
  "Outlook PST Files ": "Outlook PST Files ",
  "PDF Form Files ": "PDF Form Files ",
  "Person Employee": "Person Employee",
  "Person Employee Date Of Birth": "Date Of Birth",
  "Person Employee Ethnicity": "Ethnicity",
  "Person Employee Full Name": "Full Name",
  "Person Employee Gender": "Gender",
  "Person Employee Height": "Height",
  "Person Employee ID": "ID",
  "Person Employee Is GDPR Role": "Is GDPR Role",
  "Person Employee Last Name": "Last Name",
  "Person Employee Marital Status": "Marital Status",
  "Person Employee Name Qualifier": "Name Qualifier",
  "Person Employee Nationality": "Nationality",
  "Person Employee Place Of Birth": "Place Of Birth",
  "Person Employee Religion": "Religion",
  "Person Employee Role": "Role",
  "Person Employee Title": "Title",
  "Person Identity": "Person Identity",
  "Person Identity Date Of Birth": "Date Of Birth",
  "Person Identity Ethnicity": "Ethnicity",
  "Person Identity Full Name": "Full Name",
  "Person Identity Full Name fuzzy": "Full Name fuzzy",
  "Person Identity Gender": "Gender",
  "Person Identity Height": "Height",
  "Person Identity ID": "ID",
  "Person Identity Last Name": "Last Name",
  "Person Identity Marital Status": "Marital Status",
  "Person Identity Name Qualifier": "Name Qualifier",
  "Person Identity Nationality": "Nationality",
  "Person Identity Place Of Birth": "Place Of Birth",
  "Person Identity Religion": "Religion",
  "Person Identity Title": "Title",
  "Person Natural": "Person Natural",
  "Person Natural Customer ID": "Customer ID",
  "Person Natural Date Of Birth": "Date Of Birth",
  "Person Natural Ethnicity": "Ethnicity",
  "Person Natural Full Name": "Full Name",
  "Person Natural Full Name fuzzy": "Full Name fuzzy",
  "Person Natural Gender": "Gender",
  "Person Natural Height": "Height",
  "Person Natural Last Name": "Last Name",
  "Person Natural Marital Status": "Marital Status",
  "Person Natural Name Qualifier": "Name Qualifier",
  "Person Natural Nationality": "Nationality",
  "Person Natural Place Of Birth": "Place Of Birth",
  "Person Natural Religion": "Religion",
  "Person Natural Title": "Title",
  "Person Organisation": "Person Organisation",
  "Person Organisation Department": "Department",
  "Person Organisation Email": "Email",
  "Person Organisation Fax": "Fax",
  "Person Organisation Form Id": "Form Id",
  "Person Organisation Form Owner Id": "Form Owner Id",
  "Person Organisation Form Submission Id": "Form Submission Id",
  "Person Organisation Form Submission Owner Id": "Form Submission Owner Id",
  "Person Organisation Name": "Name",
  "Person Organisation orgCountrySet": "orgCountrySet",
  "Person Organisation Phone": "Phone",
  "Person Organisation Registration Number": "Registration Number",
  "Person Organisation Sector": "Sector",
  "Person Organisation Short Name": "Short Name",
  "Person Organisation Tax Id": "Tax Id",
  "Person Organisation Type": "Type",
  "Person Organisation URL": "URL",
  "Property": "Property",
  "Send Query": "Send Query",
  "Structured Data Insertion": "Structured Data Insertion",
  "Type": "Type",
  " unmatched": " unmatched",
  "Unstructured Data Insertion": "Unstructured Data Insertion",
  "Uses Email": "Uses Email",
  "Value": "Value",
  "Address Field": "Address Field",
  "Advanced": "Advanced",
  "Age": "Age",
  "Basic Components": "Basic Components",
  "Button": "Button",
  "Checkbox": "Checkbox",
  "Columns": "Columns",
  "Consent Status": "Consent Status",
  "Container": "Container",
  "Content": "Content",
  "Copy": "Copy",
  "Currency": "Currency",
  "Custom": "Custom",
  "Data": "Data",
  "Data Grid": "Data Grid",
  "Data Map": "Data Map",
  "Data Type": "Data Type",
  "Date": "Date",
  "Date / Time": "Date / Time",
  "Day": "Day",
  "Delete Link": "Delete Link",
  "Delete Mechanism": "Delete Mechanism",
  "Delivery Date": "Delivery Date",
  "Description": "Description",
  "Drag and Drop a form component": "Drag and Drop a form component",
  "Edit": "Edit",
  "Edit Grid": "Edit Grid",
  "Edit JSON": "Edit JSON",
  "Email": "Email",
  "Expiry Date": "Expiry Date",
  "Field Set": "Field Set",
  "File": "File",
  "Full Name": "Full Name",
  "Gender": "Gender",
  "Hidden": "Hidden",
  "HTML Element": "HTML Element",
  "Id": "Id",
  "ID": "ID",
  "Impact": "Impact",
  "Label": "Label",
  "Layout": "Layout",
  "Link": "Link",
  "Location": "Location",
  "Modal Edit": "Modal Edit",
  "Nationality": "Nationality",
  "Nested Form": "Nested Form",
  "Number": "Number",
  "Panel": "Panel",
  "Password": "Password",
  "Paste below": "Paste below",
  "Person Age": "Person Age",
  "Phone Number": "Phone Number",
  "Radio": "Radio",
  "reCAPTCHA": "reCAPTCHA",
  "Remove": "Remove",
  "Resource": "Resource",
  "Select Boxes": "Select Boxes",
  "Select": "Select",
  "Signature": "Signature",
  "Start Date": "Start Date",
  "Status": "Status",
  "Submit": "Submit",
  "Survey": "Survey",
  "Table": "Table",
  "Tabs": "Tabs",
  "Tags": "Tags",
  "Text Area": "Text Area",
  "Text Field": "Text Field",
  "Time": "Time",
  "Tipo": "Tipo",
  "Types": "Types",
  "Update Date": "Update Date",
  "Update Link": "Update Link",
  "Update Mechanism": "Update Mechanism",
  "Url": "Url",
  "Well": "Well",
  "Checks Passed": "Checks Passed",
  "Countries": "Countries",
  "Intrusion on Privacy": "Intrusion on Privacy",
  "Long Name": "Long Name",
  "Reputational Damage": "Reputational Damage",
  "Risk To Business": "Risk To Business",
  "Risk To Individuals": "Risk To Individuals",
  "Role": "Role",
  "Short Name": "Short Name",
  "Title": "Title",
  "Awareness Campaigns": "Awareness Campaigns",
  "Employees": "Employees",
  "Charts": "Charts",
  "NavPanelAwarenessPopup_title": "Awareness",
  "NavPanelAwarenessPopup_text": "You should make sure that decision makers and key\n people in your organisation are aware that the law is\nchanging to the GDPR. They need to appreciate the\nimpact this is likely to have.",
  "NavPanelAwarenessPopup_query": "def retVal = '';\ntry {\n  long numEvents = g.V().has('Metadata.Type.Object.Awareness_Campaign',eq('Object.Awareness_Campaign')).in().as('events').count().next();\n  \n  def map = g.V().has('Metadata.Type.Object.Awareness_Campaign',eq('Object.Awareness_Campaign')).in().as('events').groupCount().by('Event.Training.Status').next();\n  \n  \n  long failedCount = map.get('Failed') == null ? 0 :map.get('Failed');\n  long secondReminder = map.get('Second  Reminder') == null ? 0 : map.get('Second  Reminder') ;\n  long firstReminder = map.get('Reminder Sent') == null ? 0 :  map.get('Reminder Sent');\n  \n  \n  long scoreValue = 100L;\n  if (numEvents > 0){\n    \n    long pcntFailed = (long) (100L*failedCount/numEvents);\n    if (pcntFailed > 10){\n      scoreValue -= 60L;\n    }\n    else if (failedCount > 0){\n      scoreValue -= (40L + 2L* pcntFailed)\n    }\n    \n    \n  \n    long pcntSecondReminder = (long) (100L*secondReminder/numEvents);\n    if (pcntSecondReminder > 10){\n      scoreValue -= 30L;\n    }\n    else if (secondReminder > 0) {\n      scoreValue -= (10L + 2L*pcntWithNegativeConsent)\n    }\n  \n    scoreValue -= (10L * firstReminder/numEvents)\n   \n    // add a bit of a score, after all there was at least some training.\n    if (scoreValue == 0)\n    {\n      scoreValue = 10L\n    }\n  \n  \n    \n     \n  }else{\n    scoreValue = 0L; \n  }\n  \n  StringBuffer sb = new StringBuffer ('{ \"scoreValue\": ');\n  \n  sb.append(scoreValue)\n    .append(', \"scoreExplanation\":\"');\n  if (numEvents > 0)  {\n    sb.append('This score reflects that out of ')\n      .append(numEvents).append(' GDPR training records, ')\n      .append(failedCount).append(' have FAILED the awareness campaign tests, ')\n      .append(firstReminder).append(' have been sent a FIRST reminder to take the awareness campaign training course and, ')\n      .append(secondReminder).append(' have been sent a SECOND reminder to take the awareness campaign training course.');\n  }\n  else {\n    sb.append('There are no awareness campaign training records in place.')\n  }\n  sb.append('\" }')  \n  \n  retVal = sb.toString()\n} catch (Throwable t) {\n    \n  StringBuffer sb = new StringBuffer ('{ \"scoreValue\": ');\n  \n  sb.append(0L)\n    .append(', \"scoreExplanation\":\"');\n    sb.append('There are no awareness campaign training records in place.')\n  sb.append('\" }')  \n  retVal = sb.toString()\n}\nretVal.toString()\n",
  "Children Ages": "Children Ages",
  "Children Data Graph": "Children Data Graph",
  "NavPanelChildrenPopup_title": "Children",
  "NavPanelChildrenPopup_text": "You should start thinking now about whether you\nneed to put systems in place to verify individuals’\nages and to obtain parental or guardian consent for\nany data processing activity.",
  "NavPanelChildrenPopup_query": "long ageThresholdMs = (long)(System.currentTimeMillis() - (3600000L * 24L *365L  * 18L));\ndef dateThreshold = new java.util.Date (ageThresholdMs);\n\n\nlong numChildren = g.V().has('Metadata.Type.Person.Natural',eq('Person.Natural'))\n.where(\n    and(\n      __.values('Person.Natural.Date_Of_Birth').is(gte(dateThreshold))\n    )\n  )\n.count().next()\n\nlong numNoGuardian = g.V().has('Metadata.Type.Person.Natural',eq('Person.Natural'))\n.where(\n    and(\n      __.values('Person.Natural.Date_Of_Birth').is(gte(dateThreshold))\n    ,__.outE('Has_Parent_Or_Guardian').count().is(eq(0))\n    )\n  )\n.count().next()\n \nlong numWithoutAnyConsent = g.V().has('Metadata.Type.Person.Natural',eq('Person.Natural'))\n.where(\n    and(\n      __.values('Person.Natural.Date_Of_Birth').is(gte(dateThreshold))\n    ,__.outE('Consent').count().is(eq(0))\n    )\n  )\n.count().next()\n \n \nlong numNegativeConsent = \n\ng.V().has('Metadata.Type.Person.Natural',eq('Person.Natural'))\n .where(\n    __.values('Person.Natural.Date_Of_Birth').is(gte(dateThreshold))\n  ).as('children')\n .match(\n     __.as('children').outE('Consent').as('consentEdges')\n    ,__.as('consentEdges').count().as('consentEdgesCount')\n    ,__.as('consentEdges').inV().as('consentEvents')\n    ,__.as('consentEvents').has('Event.Consent.Status',eq('No Consent ')).count().as('negConsentCount')\n    ,__.as('children').id().as('childId')\n\n )\n .select('consentEdgesCount','negConsentCount', 'childId')\n.where('consentEdgesCount',eq('negConsentCount'))\n.where(__.as('consentEdgesCount').is(gt(0)))\n\n.count().next()\n\n\n\nlong numPendingConsent = \n\ng.V().has('Metadata.Type.Person.Natural',eq('Person.Natural'))\n .where(\n    __.values('Person.Natural.Date_Of_Birth').is(gte(dateThreshold))\n  ).as('children')\n .match(\n     __.as('children').outE('Consent').as('consentEdges')\n    ,__.as('consentEdges').count().as('consentEdgesCount')\n    ,__.as('consentEdges').inV().as('consentEvents')\n    ,__.as('consentEvents').has('Event.Consent.Status',eq('Consent Pending')).count().as('pendingConsentCount')\n    ,__.as('children').id().as('childId')\n\n )\n .select('consentEdgesCount','pendingConsentCount', 'childId')\n.where('consentEdgesCount',eq('pendingConsentCount'))\n.where(__.as('consentEdgesCount').is(gt(0)))\n\n.count().next()\n\n\n\nlong scoreValue = 100L;\nif (numChildren > 0){\n  \n  long pcntWithoutAnyConsent = (long) (100L*numWithoutAnyConsent/numChildren);\n  if (pcntWithoutAnyConsent > 10){\n    scoreValue -= 32L;\n  }\n  else if (numWithoutAnyConsent > 0) {\n    scoreValue -= (22L + pcntWithoutAnyConsent)\n  }\n  \n  \n  long pcntWithoutAnyGuardian = (long) (100L*numNoGuardian/numChildren);\n  if (pcntWithoutAnyGuardian > 10){\n    scoreValue -= 32L;\n  }\n  else if (numNoGuardian > 0){\n    scoreValue -= (22L + pcntWithoutAnyGuardian)\n  }\n    \n  long pcntWithNegativeConsent = (long) (100L*numNegativeConsent/numChildren);\n  if (pcntWithNegativeConsent > 10){\n    scoreValue -= 32L;\n  }\n  else if (numNegativeConsent > 0){\n    scoreValue -= (22L + pcntWithNegativeConsent)\n  }\n\n  scoreValue -= (7L * numPendingConsent/numChildren)\n \n\n  \n   \n}\n\nStringBuffer sb = new StringBuffer ('{ \"scoreValue\": ');\n\nsb.append(scoreValue)\n  .append(', \"scoreExplanation\":\"');\nif (numChildren > 0)  {\n  sb.append('This score reflects the fact that out of ')\n    .append(numChildren).append(' children, ')\n    .append(numWithoutAnyConsent).append(' do not have any consent (positive, negative or pending), ')\n    .append(numPendingConsent).append(' only have a pending consent to use their data, ')\n    .append(numNegativeConsent).append(' only have a negative consent to use their data, and ')\n    .append(numNoGuardian).append(' do not have a parent or guardian configured in the system.');\n}\nelse {\n  sb.append('There are not any children records for this business.')\n}\nsb.append('\" }')  \n\nsb.toString()",
  "Main Score": "Main Score",
  "Privacy Notices": "Privacy Notices",
  "Consent Events": "Consent Events",
  "Consent Chart (Privacy Notice)": "Consent Chart (Privacy Notice)",
  "Data Graph": "Data Graph",
  "Data Types": "Data Types",
  "Unmatched Records": "Unmatched Records",
  "Ingestion Events": "Ingestion Events",
  "NavPanelInformationYouHold_personGrid": "Natural Persons",
  "NavPanelInformationYouHoldPopup_text": "You should document what personal data you hold,\nwhere it came from and who you share it with. You\nmay need to organise an information audit.",
  "NavPanelInformationYouHoldPopup_title": "Info You Hold",
  "NavPanelInformationYouHoldPopup_query": "long numEvents = g.V().has('Metadata.Type.Event.Ingestion',eq('Event.Ingestion')).count().next();\n\nlong numRecordsNoEdges =\ng.V()\n .has('Metadata.Type.Event.Ingestion',eq('Event.Ingestion'))\n .where(__.inE().count().is(eq(1)))\n .count().next()\n\n\nlong scoreValue = 100L;\nif (numEvents > 0){\n  \n  long pcntNoEdges = (long) (100L*numRecordsNoEdges/numEvents);\n  if (pcntNoEdges > 5 && pcntNoEdges < 40){\n    scoreValue -= 40L;\n  }\n  else if (pcntNoEdges> 40) {\n    scoreValue -= (20L + 2L* pcntNoEdges)\n  }\n  else  {\n    scoreValue -= ( pcntNoEdges)\n  }\n  \n  \n   \n}else{\n  scoreValue = 0L; \n}\n\nStringBuffer sb = new StringBuffer ('{ \"scoreValue\": ');\n\nsb.append(scoreValue)\n  .append(', \"scoreExplanation\":\"');\nif (numRecordsNoEdges > 0)  {\n  sb.append('This score reflects that out of ')\n    .append(numEvents).append(' personally identifiable information ingestion records, ')\n    .append(numRecordsNoEdges).append(' have not been matched to an individual.')\n}\nelse if (numEvents > 0) {\n  sb.append('All ').append(numEvents).append(' personally identifiable information ingestion records in the system have been matched against individuals.')\n}\nelse {\n  sb.append('There are no personally identifiable information ingestion records in the system.')\n}\nsb.append('\" }')  \n\nsb.toString()",
  "App_title": "GDPR",
  "App_message": "Select a panel from the menu on the top right",
  "Object Contract": "Object Contract",
  "Object Sensitive Data": "Object Sensitive Data",
  "Object Sensitive Data Club Membership": "Club Membership",
  "Object Sensitive Data Church Membership": "Church Membership",
  "Object Sensitive Data Political View": "Political View",
  "Object Sensitive Data Union Membership": "Union Membership",
  "Object Sensitive Data Sexual Orientation": "Sexual Orientation",
  "Object Sensitive Data Ethnicity": "Ethnicity",
  "Object Sensitive Data Religion": "Religion",
  "Object Health": "Object Health",
  "Object Health Organ Donor": "Organ Donor",
  "Object Health Alergies": "Allergies",
  "Object Health Blood Type": "Blood Type",
  "Object Health Diseases": "Diseases",
  "Object Biometric": "Object Biometric",
  "Object Biometric Retinal scans": "Retinal Scans",
  "Object Biometric Eye Colour": "Eye Colour",
  "Object Biometric Facial Picture": "Facial Picture",
  "Object Biometric Height cm": "Height cm",
  "Object Biometric Weight kg": "Weight kg",
  "Object Biometric Fingerprints": "Fingerprints",
  "Object Genetic": "Object Genetic",
  "Object Genetic RNA": "RNA",
  "Object Genetic Family Medical History": "Family Medical History",
  "Object Genetic DNA": "DNA",
  "grid_filterOoo": "Filter",
  "grid_andCondition": "And",
  "grid_orCondition": "Or",
  "grid_clearFilter": "Clear",
  "grid_applyFilter": "Apply",
  "grid_contains": "Contains",
  "grid_notContains": "Not Contains",
  "grid_equals": "Equals",
  "grid_notEqual": "Not Equals",
  "grid_startsWith": "Starts With",
  "grid_endsWith": "Ends With",
  "grid_page": "Page",
  "grid_to": "to",
  "grid_of": "of",
  "grid_first": "First",
  "grid_previous": "Previous",
  "grid_next": "Next",
  "grid_last": "Last",
  "grid_more": "More",
  "NavPanelConsentPopup_text": "You should review how you seek, record and manage\nconsent and whether you need to make any changes.\nRefresh existing consents now if they don’t meet the\nGDPR standard.",
  "NavPanelConsentPopup_title": "Consent",
  "NavPanelConsentPopup_query": "long ageThresholdMs = (long)(System.currentTimeMillis() - (3600000L * 24L *365L  * 18L));\ndef dateThreshold = new java.util.Date (ageThresholdMs);\n\n\nlong numAdults = g.V().has('Metadata.Type.Person.Natural',eq('Person.Natural'))\n.where(\n    and(\n      __.values('Person.Natural.Date_Of_Birth').is(lt(dateThreshold))\n    )\n  )\n.count().next()\n\n\nlong numWithoutAnyConsent = g.V().has('Metadata.Type.Person.Natural',eq('Person.Natural'))\n.where(\n    and(\n      __.values('Person.Natural.Date_Of_Birth').is(lt(dateThreshold))\n    ,__.outE('Consent').count().is(eq(0))\n    )\n  )\n.count().next()\n \n \nlong numNegativeConsent = \n\ng.V().has('Metadata.Type.Person.Natural',eq('Person.Natural'))\n .where(\n    __.values('Person.Natural.Date_Of_Birth').is(lt(dateThreshold))\n  ).as('adults')\n .match(\n     __.as('adults').outE('Consent').as('consentEdges')\n    ,__.as('consentEdges').count().as('consentEdgesCount')\n    ,__.as('consentEdges').inV().as('consentEvents')\n    ,__.as('consentEvents').has('Event.Consent.Status',eq('No Consent ')).count().as('negConsentCount')\n\n )\n .select('consentEdgesCount','negConsentCount')\n.where('consentEdgesCount',eq('negConsentCount'))\n.where(__.as('consentEdgesCount').is(gt(0)))\n\n.count().next()\n\n\n\nlong numPendingConsent = \n\ng.V().has('Metadata.Type.Person.Natural',eq('Person.Natural'))\n .where(\n    __.values('Person.Natural.Date_Of_Birth').is(lt(dateThreshold))\n  ).as('adults')\n .match(\n     __.as('adults').outE('Consent').as('consentEdges')\n    ,__.as('consentEdges').count().as('consentEdgesCount')\n    ,__.as('consentEdges').inV().as('consentEvents')\n    ,__.as('consentEvents').has('Event.Consent.Status',eq('Consent Pending')).count().as('pendingConsentCount')\n\n )\n .select('consentEdgesCount','pendingConsentCount')\n.where('consentEdgesCount',eq('pendingConsentCount'))\n.where(__.as('consentEdgesCount').is(gt(0)))\n\n.count().next()\n\n\n\nlong scoreValue = 100L;\nif (numAdults > 0){\n  \n  long pcntWithoutAnyConsent = (long) (100L*numWithoutAnyConsent/numAdults);\n  if (pcntWithoutAnyConsent > 10){\n    scoreValue -= 45L;\n  }\n  else if (numWithoutAnyConsent > 0) {\n    scoreValue -= (25L + 2L* pcntWithoutAnyConsent)\n  }\n  \n  \n\n  long pcntWithNegativeConsent = (long) (100L*numNegativeConsent/numAdults);\n  if (pcntWithNegativeConsent > 10){\n    scoreValue -= 45L;\n  }\n  else if (numNegativeConsent > 0){\n    scoreValue -= (25L + 2L*pcntWithNegativeConsent)\n  }\n\n  scoreValue -= (10L * numPendingConsent/numAdults)\n \n\n  \n   \n}\n\nStringBuffer sb = new StringBuffer ('{ \"scoreValue\": ');\n\nsb.append(scoreValue)\n  .append(', \"scoreExplanation\":\"');\nif (numAdults > 0)  {\n  sb.append('This score reflects that out of ')\n    .append(numAdults).append(\", adult's records, \")\n    .append(numWithoutAnyConsent).append(' do not have any consent (positive, negative or pending), ')\n    .append(numPendingConsent).append(' only have a pending consent to use their data, ')\n    .append(numNegativeConsent).append(' only have a negative consent to use their data.');\n}\nelse {\n  sb.append('There are not any adult records for this business.')\n}\nsb.append('\" }')  \n\nsb.toString()",
  "World Map": "World Map",
  "NavPanelInternationalPopup_text": "If your organisation operates in more than one EU\nmember state (ie you carry out cross-border\nprocessing), you should determine your lead data\nprotection supervisory authority. Article 29 Working\nParty guidelines will help you do this.",
  "NavPanelInternationalPopup_title": "International",
  "NavPanelInternationalPopup_query": "long numItems = g.V().has('Metadata.Type.Object.Privacy_Impact_Assessment',eq('Object.Privacy_Impact_Assessment'))\n.count().next()\n \n \nlong numPrivNoticesWithoutRegulator = \n  g.V()\n  .has('Metadata.Type.Object.Privacy_Impact_Assessment',eq('Object.Privacy_Impact_Assessment'))\n  .where( __.out().has('Metadata.Type.Person.Organisation',eq('Person.Organisation')).count().is(eq(0)))\n  .count().next()\n\n\n \n\nlong scoreValue = 100L;\nif (numItems > 0){\n  \n  scoreValue -= (long) (100L*numPrivNoticesWithoutRegulator/numItems);\n\n\n\n\n \n}else{\n  scoreValue = 0L; \n}\n\nStringBuffer sb = new StringBuffer ('{ \"scoreValue\": ');\n\nsb.append(scoreValue)\n  .append(', \"scoreExplanation\":\"');\nif (numItems > 0)  {\n  sb.append('This score reflects that out of ');\n  sb.append(numItems).append(' Privacy Impact Assessments, ');\n   \n  if (numPrivNoticesWithoutRegulator == 0){\n    sb.append( 'ALL have a regulator assigned to them.');\n  }\n  else {\n    sb.append(numPrivNoticesWithoutRegulator);\n    if (numPrivNoticesWithoutRegulator == 1){\n      sb.append( ' does not have a regulator assigned to it.');\n    }\n    else{\n      sb.append(' do not have a regulator assigned to it.');\n    }\n  }\n    \n    \n\n}\nelse {\n  sb.append ('There are no Privacy Impact Assessments listed in the system.');\n}\n\n\n\n\nsb.append('\" }')  \n\nsb.toString()",
  "NavPanelLawfulBasisPopup_query": "long numEvents = g.V().has('Metadata.Type.Object.Privacy_Notice',eq('Object.Privacy_Notice'))\n.count().next()\n\n\nlong numWithoutAnyLawfulBasis = g.V().has('Metadata.Type.Object.Privacy_Notice',eq('Object.Privacy_Notice'))\n.where(\n  __.outE('Has_Lawful_Basis_On').count().is(eq(0))\n)\n.count().next()\n \n \nlong scoreValue = 100L;\nif (numEvents > 0){\n  scoreValue -= (100L * numWithoutAnyLawfulBasis/numEvents)\n \n}else{\n  scoreValue = 0L; \n}\n\nStringBuffer sb = new StringBuffer ('{ \"scoreValue\": ');\n\nsb.append(scoreValue)\n  .append(', \"scoreExplanation\":\"');\nif (numEvents > 0)  {\n  sb.append('This score reflects that out of ');\n  sb.append(numEvents).append(' Privacy Notices, ');\n   \n  if (numWithoutAnyLawfulBasis == 0){\n    sb.append( 'ALL have lawful basis associated with them.');\n  }\n  else {\n    sb.append(numWithoutAnyLawfulBasis);\n    if (numWithoutAnyLawfulBasis == 1){\n      sb.append( ' does not have a lawful basis associated with it.');\n    }\n    else{\n      sb.append(' do not have a lawful basis associated with them.');\n    }\n  }\n  \n\n}\nelse {\n  sb.append ('There are no Privacy Notices associated with any lawful basis in the system.');\n}\n\nsb.append('\" }')  \n\nsb.toString()",
  "NavPanelLawfulBasisPopup_title": "Lawful Basis",
  "NavPanelLawfulBasisPopup_text": "You should identify the lawful basis for your\nprocessing activity in the GDPR, document it and\nupdate your privacy notice to explain it.",
  "NavPanelPrivacyImpactAssessmentPopup_title": "Priv Impact Asmnt",
  "NavPanelPrivacyImpactAssessmentPopup_text": "You should familiarise yourself now with the ICO’s\ncode of practice on Privacy Impact Assessments as\nwell as the latest guidance from the Article 29\nWorking Party, and work out how and when to\nimplement them in your organisation.",
  "NavPanelPrivacyImpactAssessmentPopup_query": "long numItems = g.V().has('Metadata.Type.Object.Privacy_Impact_Assessment',eq('Object.Privacy_Impact_Assessment'))\n.count().next()\n \n \nlong numPIAWithoutPrivNotices = \n  g.V()\n  .has('Metadata.Type.Object.Privacy_Impact_Assessment',eq('Object.Privacy_Impact_Assessment'))\n  .where( __.both().has('Metadata.Type.Object.Privacy_Notice',eq('Object.Privacy_Notice')).count().is(eq(0)))\n  .count().next()\n\n\n \nlong numPIAWithPrivNoticesAndDataWithoutConsent = \n  g.V()\n  .has('Metadata.Type.Object.Privacy_Impact_Assessment',eq('Object.Privacy_Impact_Assessment'))\n  .where( \n    __.both().has('Metadata.Type.Object.Privacy_Notice',eq('Object.Privacy_Notice'))\n      .both().has('Event.Consent.Status',eq('No Consent '))\n      .count().is(gt(0))\n  )\n  .count().next()\n\n\nlong numPIAWithPrivNoticesAndDataWithPendingConsent = \n  g.V()\n  .has('Metadata.Type.Object.Privacy_Impact_Assessment',eq('Object.Privacy_Impact_Assessment'))\n  .where( \n    __.both().has('Metadata.Type.Object.Privacy_Notice',eq('Object.Privacy_Notice'))\n      .both().has('Event.Consent.Status',eq('Consent Pending'))\n      .count().is(gt(0))\n  )\n  .count().next()\n\n\n\n\nlong scoreValue = 100L;\nif (numItems > 0){\n  \n  scoreValue -= (numPIAWithoutPrivNotices > 0)?(long) (15L + 10L*numPIAWithoutPrivNotices/numItems):0;\n  scoreValue -= (numPIAWithPrivNoticesAndDataWithoutConsent > 0)?(long) (40L + 5L*numPIAWithPrivNoticesAndDataWithoutConsent/numItems):0;\n  scoreValue -= (numPIAWithPrivNoticesAndDataWithPendingConsent > 0)?(long) (20L + 10L*numPIAWithPrivNoticesAndDataWithPendingConsent/numItems):0;\n\n\n  scoreValue = scoreValue < 0 ? 0 : scoreValue;\n\n \n}else{\n  scoreValue = 0L; \n}\n\nStringBuffer sb = new StringBuffer ('{ \"scoreValue\": ');\n\nsb.append(scoreValue)\n  .append(', \"scoreExplanation\":\"');\nif (numItems > 0)  {\n  sb.append('This score reflects that out of ');\n  sb.append(numItems).append(' Privacy Impact Assessments, ');\n   \n  if (numPIAWithoutPrivNotices == 0){\n    sb.append( 'ALL have a Privacy Notice assigned to them, ');\n  }\n  else {\n    sb.append(numPIAWithoutPrivNotices);\n    if (numPIAWithoutPrivNotices == 1){\n      sb.append( ' does not have a Privacy Notice assigned to it, ' );\n    }\n    else{\n      sb.append(' do not have a Privacy Notice assigned to them, ');\n    }\n  }\n    \n  if (numPIAWithPrivNoticesAndDataWithoutConsent == 0){\n    sb.append( 'NONE of the Privacy Notices assigned to them have negative consents, and ');\n  }\n  else {\n    sb.append(numPIAWithPrivNoticesAndDataWithoutConsent);\n    if (numPIAWithPrivNoticesAndDataWithoutConsent == 1){\n      sb.append( ' has a privacy notice with data events that have negative consents, and ' );\n    }\n    else{\n      sb.append(' have a privacy notice with data events that have negative consents, and ');\n    }\n  }\n   \n  if (numPIAWithPrivNoticesAndDataWithPendingConsent == 0){\n    sb.append( 'NONE of the Privacy Notices assigned to them have pending consents.');\n  }\n  else {\n    sb.append(numPIAWithPrivNoticesAndDataWithPendingConsent);\n    if (numPIAWithPrivNoticesAndDataWithPendingConsent == 1){\n      sb.append( ' has a privacy notice with data events that have negative consents.' );\n    }\n    else{\n      sb.append(' have a privacy notice with data events that have negative consents.');\n    }\n  }\n   \n   \n   \n\n}\nelse {\n  sb.append ('There are no Privacy Impact Assessments listed in the system.');\n}\n\n\n\n\nsb.append('\" }')  \n\nsb.toString()",
  "NavPanelPrivacyNoticesPopup_title": "Privacy Notices",
  "NavPanelPrivacyNoticesPopup_text": "You should review your current privacy notices and\nput a plan in place for making any necessary\nchanges in time for GDPR implementation.",
  "NavPanelPrivacyNoticesPopup_query": "long numEvents = g.V().has('Metadata.Type.Object.Privacy_Notice',eq('Object.Privacy_Notice')).count().next();\n\nlong numRecordsNoConsent =\ng.V().has('Metadata.Type.Object.Privacy_Notice',eq('Object.Privacy_Notice')).as('privNotice')\n.match(\n    __.as('privNotice').both().has('Metadata.Type.Event.Consent',eq('Event.Consent')).count().as('consentCount')\n\n)\n.select('consentCount')\n.where(__.as('consentCount').is(eq(0)))\n.count().next()\n\nlong numRecordsNoPIA =\ng.V().has('Metadata.Type.Object.Privacy_Notice',eq('Object.Privacy_Notice')).as('privNotice')\n.match(\n    __.as('privNotice').both().has('Metadata.Type.Object.Privacy_Impact_Assessment',eq('Object.Privacy_Impact_Assessment')).count().as('consentCount')\n\n)\n.select('consentCount')\n.where(__.as('consentCount').is(eq(0)))\n.count().next()\n\nlong numRecordsLessThan50PcntPositiveConsent =\ng.V().has('Metadata.Type.Object.Privacy_Notice',eq('Object.Privacy_Notice')).as('privNotice')\n.match(\n    __.as('privNotice').both().has('Metadata.Type.Event.Consent',eq('Event.Consent')).count().as('consentCount')\n  , __.as('privNotice').both().has('Event.Consent.Status',eq('Consent')).count().math('_ * 2').as('posConsentCountDouble')\n)\n.select(\n  'consentCount'\n, 'posConsentCountDouble'\n)\n.where(\n  'consentCount', gt('posConsentCountDouble')\n\n)\n.count().next()\n\n\nlong scoreValue = 100L;\nif (numEvents > 0){\n  \n  long pcntNoConsent = (long) (100L*numRecordsNoConsent/numEvents);\n  if (pcntNoConsent > 10){\n    scoreValue -= 40L;\n  }\n  else if (numRecordsNoConsent> 0) {\n    scoreValue -= (20L + 2L* pcntNoConsent)\n  }\n  \n  \n  long pcntNoPIA = (long) (100L*numRecordsNoPIA/numEvents);\n  if (pcntNoPIA > 10){\n    scoreValue -= 50L;\n  }\n  else if (numRecordsNoPIA > 0){\n    scoreValue -= (30L + 2L*pcntNoPIA)\n  }\n\n  scoreValue -= (10L * numRecordsLessThan50PcntPositiveConsent/numEvents)\n \n\n  \n   \n}else{\n  scoreValue = 0L; \n}\n\nStringBuffer sb = new StringBuffer ('{ \"scoreValue\": ');\n\nsb.append(scoreValue)\n  .append(', \"scoreExplanation\":\"');\nif (numEvents > 0)  {\n  sb.append('This score reflects that out of ');\n  sb.append(numEvents).append(' privacy notices, ');\n   \n  if (numRecordsNoConsent == 0){\n    sb.append( ' ALL have consent events, ');\n  }\n  else {\n    sb.append(numRecordsNoConsent);\n    if (numRecordsNoConsent == 1){\n      sb.append( ' does not have any consent events, ');\n    }\n    else{\n      sb.append(' do not have any consent events, and ');\n    }\n  }\n  \n  if (numRecordsNoPIA == 0){\n    sb.append(' ALL have Privacy Impact Assessments, and ');\n\n  }\n  else{\n    sb.append(numRecordsNoPIA);\n    if (numRecordsNoPIA == 1){\n      sb.append(' does not have any Privacy Impact Assessments, and ');\n    }\n    else {\n      sb.append(' do not have any Privacy Impact Assessments, and ');\n    }\n  }\n  \n  if (numRecordsLessThan50PcntPositiveConsent == 0){\n    sb.append(' NONE have more than 50% negative or pending consent events.');\n  }\n  else{\n    sb.append(numRecordsLessThan50PcntPositiveConsent);\n    if (numRecordsLessThan50PcntPositiveConsent == 1){\n      sb.append(' has more than 50% negative or pending consent events.');\n    }\n    else {\n      sb.append(' have more than 50% negative or pending consent events.');\n    }\n  }\n\n\n}\nelse {\n  sb.append ('There are no Privacy Notices in the system.');\n}\n\nsb.append('\" }')  \n\nsb.toString()",
  "NavPanelSubjectAccessRequestPopup_title": "Subj Access Req",
  "NavPanelSubjectAccessRequestPopup_query": "long thirtyDayThresholdMs = (long)(System.currentTimeMillis() - (3600000L * 24L *30L));\ndef thirtyDayDateThreshold = new java.util.Date (thirtyDayThresholdMs);\nlong tenDayThresholdMs = (long)(System.currentTimeMillis() - (3600000L * 24L *10L));\ndef tenDayDateThreshold = new java.util.Date (tenDayThresholdMs);\n\nlong numEvents = g.V().has('Metadata.Type.Event.Subject_Access_Request',eq('Event.Subject_Access_Request')).count().next();\n\nlong numRecordsOlder30Days =\n\ng.V().has('Metadata.Type.Event.Subject_Access_Request',eq('Event.Subject_Access_Request')).as('sar')\n.where(\n  __.values('Event.Subject_Access_Request.Metadata.Create_Date').is(lte(thirtyDayDateThreshold))\n) \n\n.count().next()\n\nlong numRecordsOlder10Days =\n\ng.V().has('Metadata.Type.Event.Subject_Access_Request',eq('Event.Subject_Access_Request')).as('sar')\n.where(\n  __.values('Event.Subject_Access_Request.Metadata.Create_Date').is(lte(tenDayDateThreshold))\n) \n\n.count().next()\n\n\nlong scoreValue = 100L;\nif (numEvents > 0){\n  \n  long pcntOlder30Days = (long) (100L*numRecordsOlder30Days/numEvents);\n  if (pcntOlder30Days > 10){\n    scoreValue -= 80L;\n  }\n  else if (numRecordsOlder30Days> 0) {\n    scoreValue -= (60L + 2L* pcntOlder30Days)\n  }\n  \n  \n\n  scoreValue -= (20L * numRecordsOlder10Days/numEvents)\n \n\n  \n   \n}else{\n  scoreValue = 0L; \n}\n\nStringBuffer sb = new StringBuffer ('{ \"scoreValue\": ');\n\nsb.append(scoreValue)\n  .append(', \"scoreExplanation\":\"');\nif (numEvents > 0)  {\n  sb.append('This score reflects that out of ');\n  sb.append(numEvents).append(' Subject Access Requests, ');\n   \n  if (numRecordsOlder30Days == 0){\n    sb.append( 'NONE are older than 30 days, and ');\n  }\n  else {\n    sb.append(numRecordsOlder30Days);\n    if (numRecordsOlder30Days == 1){\n      sb.append( ' is older than 30 days, and ');\n    }\n    else{\n      sb.append(' are older than 30 days, and ');\n    }\n  }\n  \n  if (numRecordsOlder10Days == 0){\n    sb.append(' NONE are older than 10 days.');\n\n  }\n  else{\n    sb.append(numRecordsOlder10Days);\n    if (numRecordsOlder10Days == 1){\n      sb.append(' is older than 10 days.');\n    }\n    else {\n      sb.append(' are older than 10 days.');\n    }\n  }\n  \n\n}\nelse {\n  sb.append ('There are no Subject Access Requests in the system.');\n}\n\nsb.append('\" }')  \n\nsb.toString()",
  "NavPanelSubjectAccessRequestPopup_text": "You should update your procedures and plan how you\nwill handle requests within the new timescales and\nprovide any additional information.",
  "Date Of Birth": "Date Of Birth",
  "Compliance Scores": "Compliance Scores",
  "NavPanelIndividualsRightsPopup_title": "Individual's Rights",
  "NavPanelIndividualsRightsPopup_query": "long numItems = g.V()\n .has('Metadata.Type.Object.Data_Procedures',eq('Object.Data_Procedures'))\n .count()\n .next()\n\n\nlong numDeleteURL = g.V()\n .has('Metadata.Type.Object.Data_Procedures',eq('Object.Data_Procedures'))\n .values('Object.Data_Procedures.Delete_URL')\n .count()\n .next()\n\nlong numUpdateURL = g.V()\n .has('Metadata.Type.Object.Data_Procedures',eq('Object.Data_Procedures'))\n .values('Object.Data_Procedures.Delete_URL')\n .count()\n .next()\n\nlong numWithoutDeleteUrl = (numItems - numDeleteURL);\nlong numWithoutUpdateUrl = (numItems - numUpdateURL);\n\nlong scoreValue = 100L;\nif (numItems > 0){\n  \n  scoreValue -= (long) (50L*numWithoutDeleteUrl/numItems);\n  scoreValue -= (long) (50L*numWithoutUpdateUrl/numItems);\n\n}else{\n  scoreValue = 0L; \n}\n\nStringBuffer sb = new StringBuffer ('{ \"scoreValue\": ');\n\nsb.append(scoreValue)\n  .append(', \"scoreExplanation\":\"');\nif (numItems > 0)  {\n  sb.append('This score reflects that out of ');\n  sb.append(numItems).append(' Data Procedures, ');\n   \n  if (numWithoutUpdateUrl == 0){\n    sb.append( 'ALL have an update URL, and ');\n  }\n  else {\n    sb.append(numWithoutUpdateUrl);\n    if (numWithoutUpdateUrl == 1){\n      sb.append( ' has an update URL, and ');\n    }\n    else{\n      sb.append(' have an update URL, and ');\n    }\n  }\n    \n    \n       \n  if (numWithoutDeleteUrl == 0){\n    sb.append( 'ALL have a delete URL.');\n  }\n  else {\n    sb.append(numWithoutDeleteUrl);\n    if (numWithoutDeleteUrl == 1){\n      sb.append( ' has a delete URL.');\n    }\n    else{\n      sb.append(' have a delete URL.');\n    }\n  }\n\n\n}\nelse {\n  sb.append ('There are no Data Procedures listed in the system.');\n}\n\n\n\n\nsb.append('\" }')  \n\nsb.toString();",
  "NavPanelIndividualsRightsPopup_text": "You should check your procedures to ensure they\ncover all the rights individuals have, including how\nyou would delete personal data or provide data\nelectronically and in a commonly used format. ",

  "NavPanelDataBreachPopup_title": "Data Breaches",
  "NavPanelDataBreachPopup_query": "long numItems = g.V().has('Metadata.Type.Event.Data_Breach',eq('Event.Data_Breach'))\n.count().next()\n \n \nlong numOpenDataBreachDataStolen = \n  g.V()\n  .has('Event.Data_Breach.Status',eq('Open'))\n  .where( \n    or(\n      __.has('Event.Data_Breach.Impact',eq('Customer Data Stolen (External)'))\n     ,__.has('Event.Data_Breach.Impact',eq('Customer Data Stolen (Internal)'))\n    )\n  )\n  .count().next()\n\nlong numOpenDataBreachDataLost = \n  g.V()\n  .has('Event.Data_Breach.Status',eq('Open'))\n  .where( \n    __.has('Event.Data_Breach.Impact',eq('Data Lost'))\n  )\n  .count().next()\n\n\n\n\nlong scoreValue = 100L;\nif (numItems > 0){\n  \n  if (numOpenDataBreachDataLost > 0){\n    scoreValue -= (long) (15L + 10L*numOpenDataBreachDataLost/numItems);\n  }\n  \n  if (numOpenDataBreachDataStolen > 0){\n    scoreValue -= (long) (60L + 15L*numOpenDataBreachDataStolen/numItems);\n  }\n\n  scoreValue = scoreValue < 0 ? 0 : scoreValue;\n\n \n}else{\n  scoreValue = 100L; \n}\n\nStringBuffer sb = new StringBuffer ('{ \"scoreValue\": ');\n\nsb.append(scoreValue)\n  .append(', \"scoreExplanation\":\"');\nif (numItems > 0)  {\n  sb.append('This score reflects that out of ');\n  sb.append(numItems).append(' Data Breach Event(s), ');\n   \n  if (numOpenDataBreachDataStolen == 0){\n    sb.append( 'No data has been stolen, ');\n  }\n  else {\n    sb.append(numOpenDataBreachDataStolen);\n    if (numOpenDataBreachDataStolen == 1){\n      sb.append( ' was related to stolen data, ' );\n    }\n    else{\n      sb.append(' were related to stolen data, ');\n    }\n  }\n    \n  if (numOpenDataBreachDataLost == 0){\n    sb.append( 'and NONE were related to data loss.');\n  }\n  else {\n    sb.append('and ')\n    sb.append(numOpenDataBreachDataLost);\n    if (numOpenDataBreachDataLost == 1){\n      sb.append( ' was related to data loss.' );\n    }\n    else{\n      sb.append(' were related to data loss.');\n    }\n  }\n   \n   \n   \n\n}\nelse {\n  sb.append ('There are no Data Breach Events listed in the system.');\n}\n\n\n\n\nsb.append('\" }')  \n\nsb.toString()",
  "NavPanelDataBreachPopup_text" : "You should make sure you have the right procedures\nin place to detect, report and investigate a personal\ndata breach.",

  "NavPanelDataProtnOfficerPopup_title": "Data Prot'n Offcr",
  "NavPanelDataProtnOfficerPopup_query": "long numDPOs = g.V().has('Person.Employee.Role',eq('Data Protection Officer'))\n.count().next()\n \n \nlong numDPODirectReports = g.V().has('Person.Employee.Role',eq('Data Protection Officer')).inE('Reports_To')\n.count().next()\n\n\nlong numDPOsFailed  = g.V().has('Person.Employee.Role',eq('Data Protection Officer'))\n.in().has('Event.Training.Status',eq('Failed'))\n.count().next()\n \n\nlong numDPODirectReportsFailed = g.V().has('Person.Employee.Role',eq('Data Protection Officer')).inE('Reports_To')\n.outV().in().has('Event.Training.Status',eq('Failed'))\n.count().next()\n\n\nlong numDPOsSecondReminder  = g.V().has('Person.Employee.Role',eq('Data Protection Officer'))\n.in().has('Event.Training.Status',eq('Second  Reminder'))\n.count().next()\n \n\nlong numDPODirectReportsSecondReminder = g.V().has('Person.Employee.Role',eq('Data Protection Officer')).inE('Reports_To')\n.outV().in().has('Event.Training.Status',eq('Second  Reminder'))\n.count().next()\n\n\n\n\nlong scoreValue = 100L;\nif (numDPOs > 0){\n  scoreValue -= (long) (25L + 25L*numDPOsFailed/numDPOs);\n  scoreValue -= (long) (6L + 7L*numDPOsSecondReminder/numDPOs);\n}\nif (numDPODirectReports > 0){\n  scoreValue -= (long) (13L + 12L*numDPODirectReportsFailed/numDPODirectReports);\n  \n  scoreValue -= (long) (6L + 6L*numDPODirectReportsSecondReminder/numDPODirectReports);\n}\nif (numDPOs == 0 && numDPODirectReports == 0){\n  scoreValue = 0L; \n}\n\nStringBuffer sb = new StringBuffer ('{ \"scoreValue\": ');\n\nsb.append(scoreValue)\n  .append(', \"scoreExplanation\":\"');\nif (numDPOs > 0)  {\n  sb.append('This score reflects that out of ');\n  sb.append(numDPOs);\n  sb.append(' Data Protection Officer(s), ');\n  if (numDPOsFailed == 0){\n    sb.append( 'NONE have failed the GDPR Awareness Test, and ');\n  }\n  else {\n    sb.append(numDPOsFailed);\n    if (numDPOsFailed == 1){\n      sb.append( ' has failed the GDPR Awarenss Test, and ');\n    }\n    else{\n      sb.append(' have failed the GDPR Awarenss Test, and ');\n    }\n  }\n    \n    \n  if (numDPOsSecondReminder == 0){\n    sb.append( 'NONE have received a second reminder to take the test.');\n  }\n  else {\n    sb.append(numDPOsSecondReminder);\n    if (numDPOsSecondReminder == 1){\n      sb.append( ' has received a second reminder to take the test.');\n    }\n    else{\n      sb.append(' have received a second reminder to take the test.');\n    }\n  }\n\n\n}\nelse {\n  sb.append ('There are no Data Protection Officers listed in the system.');\n}\n\nif (numDPODirectReports > 0){\n  sb.append (\"  Out of the \").append(numDPODirectReports);\n  if (numDPODirectReports == 1){\n    sb.append(\" Data Protection Officers Direct Report, \");\n  }\n  else{\n    sb.append(\" Data Protection Officers Direct Reports, \");\n  }\n  \n  if (numDPODirectReportsFailed == 0){\n    sb.append (\"NONE have failed the test, and \");\n  }\n  else{\n    sb.append(numDPODirectReportsFailed);\n    if (numDPODirectReportsFailed == 1){\n      sb.append (\" has failed the test, and \");\n    }\n    else{\n      sb.append (\" have failed the test, and \");\n    }\n  }\n  \n  if (numDPODirectReportsSecondReminder == 0){\n    sb.append (\"NONE have received a second test reminder.\");\n  }\n  else{\n    sb.append(numDPODirectReportsSecondReminder);\n    if (numDPODirectReportsSecondReminder == 1){\n      sb.append (\" has received a second test reminder.\");\n    }\n    else{\n      sb.append (\" have received a second test reminder.\");\n    }\n  }\n  \n  \n}\n\n\n\nsb.append('\" }')  \n\nsb.toString()",
  "NavPanelDataProtnOfficerPopup_text" : "You should designate someone to take responsibility\nfor data protection compliance and assess where this\nrole will sit within your organisation’s structure and\ngovernance arrangements. You should consider\nwhether you are required to formally designate a\nData Protection Officer.",
  "SAR Type": "SAR Type",
  "Request Date": "Request Date",
  "SAR Status": "SAR Status",
  "Request Status": "Request Status",
  "Request Types": "Request Types",
  "Detailed Scores": "Detailed Scores",
  "Details": "Details",
  "Preview": "Preview",
  "Save": "Save",
  "Chidren's ages": "Chidren's ages",
  "Info Collected": "Info Collected",
  "Who is Collecting": "Who is Collecting",
  "How is it Collected": "How is it Collected",
  "Why is it Collected": "Why is it Collected",
  "How will it be Used": "How will it be Used",
  "Who will it be Shared": "Who will it be Shared",
  "Effect on Individuals": "Effect on Individuals",
  "Likely to Complain": "Likely to Complain",
  "Link to Campaign": "Link to Campaign",
  "Stop Date": "Expiry Date",
  "Passed": "Approved",
  "Link Sent": "Link Sent",
  "Reminder Sent": "Reminder Sent",
  "Second  Reminder": "Second Reminder",
  "Compliance Notices": "Compliance Notices",
  "Compliance Notices Grid": "Compliance Notices Grid",
  "Metadata Type Object Privacy Notice": "Data Type",
  "Text": "Text",
  "Data Breach Graph": "Data Breach Graph",
  "Infrastructure Graph": "Infrastructure Graph",
  "Metadata Type Object AWS VPC": "VPC",
  "Ethnicity": "Ethnicity",
  "Religion": "Religion",
  "Political View": "Political View",
  "Union Membership": "Union Membership",
  "Church Membership": "Church Membership",
  "Sensitive Data": "Sensitive Data",
  "Metadata Type Event Subject Access Request": "Data Type",
  "Name": "Propriedade",
  "Match Weight": "Match Weight",
  "Exclude From Search": "Exclude From Search"

}
